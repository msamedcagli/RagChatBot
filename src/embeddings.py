"""
embeddings.py
HuggingFace embedding modeli y√∂netimi
"""

from langchain.embeddings import HuggingFaceEmbeddings
from typing import List
import numpy as np


class EmbeddingManager:
    """Embedding i≈ülemlerini y√∂neten sƒ±nƒ±f"""
    
    def __init__(self, model_name: str = "sentence-transformers/all-MiniLM-L6-v2"):
        """
        Args:
            model_name: HuggingFace model adƒ±
        """
        self.model_name = model_name
        
        print(f"üß† Embedding modeli y√ºkleniyor: {model_name}")
        
        # HuggingFace embeddings olu≈ütur
        self.embedding_model = HuggingFaceEmbeddings(
            model_name=model_name,
            model_kwargs={'device': 'cpu'},
            encode_kwargs={'normalize_embeddings': True}
        )
        
        print(f"‚úÖ Embedding modeli hazƒ±r!")
        
        # Test embedding ile boyutu √∂ƒüren
        test_embedding = self.embed_query("test")
        self.embedding_dimension = len(test_embedding)
        print(f"üìä Embedding boyutu: {self.embedding_dimension}")
    
    def embed_query(self, text: str) -> List[float]:
        """Tek bir metin i√ßin embedding olu≈üturur"""
        return self.embedding_model.embed_query(text)
    
    def embed_documents(self, texts: List[str]) -> List[List[float]]:
        """Birden fazla metin i√ßin embedding olu≈üturur"""
        return self.embedding_model.embed_documents(texts)
    
    def calculate_similarity(self, embedding1: List[float], embedding2: List[float]) -> float:
        """ƒ∞ki embedding arasƒ±ndaki cosine similarity hesaplar"""
        vec1 = np.array(embedding1)
        vec2 = np.array(embedding2)
        similarity = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))
        return float(similarity)
    
    def get_model_info(self) -> dict:
        """Model bilgilerini d√∂nd√ºr√ºr"""
        return {
            "model_name": self.model_name,
            "embedding_dimension": self.embedding_dimension,
            "device": "cpu",
            "normalization": True
        }